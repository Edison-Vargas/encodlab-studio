import React from 'react';

export const jwtConceptsContent = (
  <>
    <div className="prose dark:prose-invert max-w-none">
      <h2 className="text-2xl font-bold mb-4">Conceitos Fundamentais de JWT</h2>

      <p className="mb-2">
        O <strong>EncodLab Studio</strong> foi projetado para explorar na pr√°tica como funcionam os <em>JSON Web Tokens (JWTs)</em> ‚Äî um padr√£o aberto (RFC 7519) que define uma maneira compacta, segura e autocontida de transmitir informa√ß√µes entre sistemas como objetos JSON assinados digitalmente.
      </p>

      <h3 className="text-xl font-semibold mt-4 mb-2">üì¶ Estrutura de um JWT</h3>
      <p>Um token JWT √© composto por tr√™s partes separadas por ponto (<code>.</code>):</p>
      <ul className="list-disc list-inside mb-4">
        <li>
          <strong>Header:</strong> Metadados sobre o token ‚Äî como o algoritmo utilizado (<code>HS256</code>, <code>RS256</code>) e o tipo do token.
          <pre className="bg-gray-100 dark:bg-gray-900 p-2 rounded-md text-sm my-2 overflow-x-auto">
            <code>
{`{
  "alg": "HS256",
  "typ": "JWT"
}`}
            </code>
          </pre>
        </li>
        <li>
          <strong>Payload:</strong> Carrega as informa√ß√µes (‚Äúclaims‚Äù), como ID do usu√°rio (<code>sub</code>) ou data de expira√ß√£o (<code>exp</code>).
          <pre className="bg-gray-100 dark:bg-gray-900 p-2 rounded-md text-sm my-2 overflow-x-auto">
            <code>
{`{
  "sub": "1234567890",
  "name": "Jo√£o da Silva",
  "admin": true
}`}
            </code>
          </pre>
        </li>
        <li>
          <strong>Signature:</strong> Valida a integridade do token, assinando o conte√∫do codificado com uma chave (secreta ou p√∫blica).
        </li>
      </ul>

      <h3 className="text-xl font-semibold mt-4 mb-2">üîÅ Como Funciona um JWT na Pr√°tica</h3>
      <ol className="list-decimal list-inside mb-4">
        <li>Usu√°rio faz login com email/senha.</li>
        <li>Servidor autentica e gera um JWT assinado com informa√ß√µes no payload.</li>
        <li>JWT √© enviado ao cliente, que armazena localmente (ex: localStorage, cookie).</li>
        <li>Em requisi√ß√µes futuras, o JWT √© enviado no cabe√ßalho: <code>Authorization: Bearer [seu-token]</code></li>
        <li>Servidor valida a assinatura e decodifica os dados ‚Äî sem consultar banco de dados.</li>
      </ol>

      <h3 className="text-xl font-semibold mt-4 mb-2">‚úÖ Vantagens</h3>
      <ul className="list-disc list-inside mb-4">
        <li><strong>Autossuficiente:</strong> Dispensa sess√µes armazenadas no servidor.</li>
        <li><strong>Compacto:</strong> Leve o suficiente para ser transmitido em cabe√ßalhos HTTP.</li>
        <li><strong>Seguro:</strong> A assinatura impede altera√ß√£o n√£o autorizada.</li>
        <li><strong>Escal√°vel:</strong> Ideal para apps distribu√≠dos e arquiteturas sem estado.</li>
      </ul>

      <h3 className="text-xl font-semibold mt-4 mb-2">‚ö†Ô∏è Considera√ß√µes e Limita√ß√µes</h3>
      <ul className="list-disc list-inside mb-4">
        <li><strong>Dificuldade em invalidar:</strong> N√£o √© poss√≠vel revogar um JWT sem estrat√©gia externa (como blacklists).</li>
        <li><strong>Payload vis√≠vel:</strong> Como √© apenas codificado (e n√£o criptografado), qualquer um pode ler ‚Äî n√£o coloque dados sens√≠veis!</li>
        <li><strong>Sequestr√°vel:</strong> Se roubado, o token pode ser usado at√© expirar ‚Äî use HTTPS e boas pr√°ticas de armazenamento.</li>
      </ul>
    </div>

    <div className="prose dark:prose-invert max-w-none mt-10">
      <h2 className="text-2xl font-bold mb-4">Conceitos Fundamentais de Base64</h2>
      <p>
        O <strong>Base64</strong> √© um mecanismo de codifica√ß√£o que converte dados bin√°rios em texto ASCII leg√≠vel. Muito usado para transportar imagens, arquivos ou conte√∫do bin√°rio por canais que s√≥ aceitam texto ‚Äî como cabe√ßalhos HTTP, cookies ou campos de formul√°rios.
      </p>

      <h3 className="text-xl font-semibold mt-4 mb-2">üßÆ Como Funciona</h3>
      <ul className="list-disc list-inside mb-4">
        <li>Divide os dados bin√°rios em grupos de 3 bytes (24 bits).</li>
        <li>Fragmenta em 4 grupos de 6 bits.</li>
        <li>Converte cada grupo em um caractere (A‚ÄìZ, a‚Äìz, 0‚Äì9, <code>+</code>, <code>/</code>).</li>
        <li>Completa com <code>=</code> se n√£o houver m√∫ltiplo de 3.</li>
      </ul>

      <h3 className="text-xl font-semibold mt-4 mb-2">üìå Base64 vs Base64Url</h3>
      <p>
        O <code>Base64Url</code> √© uma varia√ß√£o do Base64, adaptada para uso seguro em URLs e tokens como o JWT.
      </p>
      <ul className="list-disc list-inside mb-4">
        <li><code>+</code> vira <code>-</code> e <code>/</code> vira <code>_</code></li>
        <li>O <code>=</code> de preenchimento √© omitido</li>
        <li>Evita colis√µes ou malforma√ß√µes em URLs e headers</li>
      </ul>

      <p>
        Tanto o Header quanto o Payload de um JWT usam <strong>Base64Url</strong> antes de serem unidos e assinados. Por isso, entender codifica√ß√£o √© essencial para compreender os tokens.
      </p>
    </div>
  </>
);
